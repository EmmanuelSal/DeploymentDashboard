{"ast":null,"code":"/*!\r\n * chartjs-plugin-trendline.js\r\n * Version: 0.2.2\r\n *\r\n * Copyright 2020 Marcus Alsterfjord\r\n * Released under the MIT license\r\n * https://github.com/Makanz/chartjs-plugin-trendline/blob/master/README.md\r\n *\r\n * Mod by: vesal: accept also xy-data so works with scatter\r\n */\nvar pluginTrendlineLinear = {\n  id: \"trendlineLinear\",\n  afterDraw: function afterDraw(chartInstance) {\n    var yScale;\n    var xScale;\n\n    for (var axis in chartInstance.scales) {\n      if (axis[0] == 'x') xScale = chartInstance.scales[axis];else yScale = chartInstance.scales[axis];\n      if (xScale && yScale) break;\n    }\n\n    var ctx = chartInstance.chart.ctx;\n    chartInstance.data.datasets.forEach(function (dataset, index) {\n      if (dataset.trendlineLinear && chartInstance.isDatasetVisible(index) && dataset.data.length != 0) {\n        var datasetMeta = chartInstance.getDatasetMeta(index);\n        addFitter(datasetMeta, ctx, dataset, xScale, chartInstance.scales[datasetMeta.yAxisID]);\n      }\n    });\n    ctx.setLineDash([]);\n  }\n};\n\nfunction addFitter(datasetMeta, ctx, dataset, xScale, yScale) {\n  var style = dataset.trendlineLinear.style || dataset.borderColor;\n  var lineWidth = dataset.trendlineLinear.width || dataset.borderWidth;\n  var lineStyle = dataset.trendlineLinear.lineStyle || \"solid\";\n  style = style !== undefined ? style : \"rgba(169,169,169, .6)\";\n  lineWidth = lineWidth !== undefined ? lineWidth : 3;\n  var fitter = new LineFitter();\n  var lastIndex = dataset.data.length - 1;\n  var startPos = datasetMeta.data[0]._model.x;\n  var endPos = datasetMeta.data[lastIndex]._model.x;\n  var xy = false;\n  if (dataset.data && typeof dataset.data[0] === 'object') xy = true;\n  dataset.data.forEach(function (data, index) {\n    if (data == null) return;\n\n    if (xScale.options.type === \"time\") {\n      var x = data.x != null ? data.x : data.t;\n      fitter.add(new Date(x).getTime(), data.y);\n    } else if (xy) {\n      fitter.add(data.x, data.y);\n    } else {\n      fitter.add(index, data);\n    }\n  });\n  var x1 = xScale.getPixelForValue(fitter.minx);\n  var x2 = xScale.getPixelForValue(fitter.maxx);\n  var y1 = yScale.getPixelForValue(fitter.f(fitter.minx));\n  var y2 = yScale.getPixelForValue(fitter.f(fitter.maxx));\n\n  if (!xy) {\n    x1 = startPos;\n    x2 = endPos;\n  }\n\n  var drawBottom = datasetMeta.controller.chart.chartArea.bottom;\n  var chartWidth = datasetMeta.controller.chart.width;\n\n  if (y1 > drawBottom) {\n    // Left side is below zero\n    var diff = y1 - drawBottom;\n    var lineHeight = y1 - y2;\n    var overlapPercentage = diff / lineHeight;\n    var addition = chartWidth * overlapPercentage;\n    y1 = drawBottom;\n    x1 = x1 + addition;\n  } else if (y2 > drawBottom) {\n    // right side is below zero\n    var diff = y2 - drawBottom;\n    var lineHeight = y2 - y1;\n    var overlapPercentage = diff / lineHeight;\n    var subtraction = chartWidth - chartWidth * overlapPercentage;\n    y2 = drawBottom;\n    x2 = chartWidth - (x2 - subtraction);\n  }\n\n  ctx.lineWidth = lineWidth;\n\n  if (lineStyle === \"dotted\") {\n    ctx.setLineDash([2, 3]);\n  }\n\n  ctx.beginPath();\n  ctx.moveTo(x1, y1);\n  ctx.lineTo(x2, y2);\n  ctx.strokeStyle = style;\n  ctx.stroke();\n}\n\nfunction LineFitter() {\n  this.count = 0;\n  this.sumX = 0;\n  this.sumX2 = 0;\n  this.sumXY = 0;\n  this.sumY = 0;\n  this.minx = 1e100;\n  this.maxx = -1e100;\n}\n\nLineFitter.prototype = {\n  'add': function add(x, y) {\n    x = parseFloat(x);\n    y = parseFloat(y);\n    this.count++;\n    this.sumX += x;\n    this.sumX2 += x * x;\n    this.sumXY += x * y;\n    this.sumY += y;\n    if (x < this.minx) this.minx = x;\n    if (x > this.maxx) this.maxx = x;\n  },\n  'f': function f(x) {\n    x = parseFloat(x);\n    var det = this.count * this.sumX2 - this.sumX * this.sumX;\n    var offset = (this.sumX2 * this.sumY - this.sumX * this.sumXY) / det;\n    var scale = (this.count * this.sumXY - this.sumX * this.sumY) / det;\n    return offset + x * scale;\n  }\n}; // If we're in the browser and have access to the global Chart obj, register plugin automatically\n\nif (typeof window !== \"undefined\" && window.Chart) window.Chart.plugins.register(pluginTrendlineLinear); // Otherwise, try to export the plugin\n\ntry {\n  module.exports = exports = pluginTrendlineLinear;\n} catch (e) {}","map":null,"metadata":{},"sourceType":"script"}
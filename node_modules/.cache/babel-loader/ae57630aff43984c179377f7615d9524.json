{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Emman\\\\Documents\\\\ME4\\\\FYP\\\\FinalDash\\\\shards-dashboard-react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"C:\\\\Users\\\\Emman\\\\Documents\\\\ME4\\\\FYP\\\\FinalDash\\\\shards-dashboard-react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Emman\\\\Documents\\\\ME4\\\\FYP\\\\FinalDash\\\\shards-dashboard-react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Emman\\\\Documents\\\\ME4\\\\FYP\\\\FinalDash\\\\shards-dashboard-react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Emman\\\\Documents\\\\ME4\\\\FYP\\\\FinalDash\\\\shards-dashboard-react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Emman\\\\Documents\\\\ME4\\\\FYP\\\\FinalDash\\\\shards-dashboard-react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Emman\\\\Documents\\\\ME4\\\\FYP\\\\FinalDash\\\\shards-dashboard-react\\\\src\\\\components\\\\2020Graphs\\\\SDHistogram.js\";\nimport React from 'react';\nimport Chart from \"../../utils/chart\";\nimport * as d3 from \"d3\";\nvar binCount = [];\nd3.csv(\"https://graphtest123.s3.eu-west-2.amazonaws.com/FMX2_Gradebook_2020_21_03_26_Mobius_Plus_PT_anonymous%2B-AWSupload.csv\") // request csv file\n.then(makeChart); // converts into an array then call makeChart() function\n// calls function to make a chart after it has been converted into an array\n\nfunction makeChart(students) {\n  // takes in an array of students\n  //make dictionary for tutorial sheets - put in same order as csv\n  var progressScores = [];\n  var dictSheet = {\n    Sheet5: [],\n    Sheet4: [],\n    Sheet3: [],\n    Sheet2: [],\n    Sheet1: [],\n    Sheet8: [],\n    Sheet7: [],\n    Sheet6: [],\n    Sheet12: [],\n    Sheet11: [],\n    Sheet10: [],\n    Sheet9: [],\n    Sheet17: [],\n    Sheet16: [],\n    Sheet15: [],\n    Sheet14: [],\n    Sheet13: []\n  };\n  var LectureDate = [28, 21, 14, 7, 0, 49, 42, 35, 77, 70, 63, 56, 112, 105, 98, 91, 84]; //make an array of lecture start dates\n\n  var dictPercentile = {\n    P5: [],\n    P4: [],\n    P3: [],\n    P2: [],\n    P1: [],\n    P8: [],\n    P7: [],\n    P6: [],\n    P12: [],\n    P11: [],\n    P10: [],\n    P9: [],\n    P17: [],\n    P16: [],\n    P15: [],\n    P14: [],\n    P13: []\n  };\n  var PercentAvgSheet1to8 = [];\n  var DaysAfterLectMeanSheet1to8 = [];\n  var Sheet1to8SD = [];\n  var Percentile1to8SD = []; // for loop to check and calculate the days after lecture when students started tutorial sheet\n\n  for (var i = 0; i < students.length; i++) {\n    var count = -1;\n    var LectureCount = 0;\n    var progressKey = Object.keys(students[i])[97];\n    var progressScoremaybe = students[i][progressKey];\n    progressScores.push(parseFloat(progressScoremaybe / 40 * 100));\n\n    for (var j = 8; j <= 90; j += 5) {\n      var key = Object.keys(students[i])[j]; // access title of start times\n\n      var value = students[i][key]; // gives date in raw form\n      // console.log(\"Raw form date\" + \" \" + value)\n      //convert date string into a time object\n\n      var date = new Date(value); // console.log(\"date\" + \" \" + date)\n\n      var DayNumber = dayOfYear(date); // console.log(\"day number is\" + \" \" + DayNumber)\n      //need to account for imperial calendar with 3rd october as week 1\n\n      if (value !== 0) {\n        count++;\n      } else {\n        continue;\n      }\n\n      if (value === \"\") {\n        DayNumber = 154;\n      } else if (dayOfYear(date) >= 286 || dayOfYear(date) < 11) {\n        DayNumber -= 286;\n      } else if (dayOfYear(date) < 46 || dayOfYear(date) >= 11) {\n        DayNumber += 52;\n      } else {\n        DayNumber += 45;\n      }\n\n      key = Object.keys(dictSheet)[count]; //accesses tutorial sheet dictionary\n\n      dictSheet[key][i] = Math.abs(DayNumber - LectureDate[LectureCount]);\n      LectureCount++;\n    }\n  }\n\n  ; //create percentiles\n\n  for (var i = 0; i < Object.keys(dictPercentile).length; i++) {\n    key = Object.keys(dictPercentile)[i]; //accesses tutorial sheet dictionary\n\n    var key2 = Object.keys(dictSheet)[i]; //accesses tutorial sheet dictionary\n\n    for (var j = 0; j <= students.length; j++) {\n      count = 0;\n\n      for (var z = 0; z <= students.length; z++) {\n        if (dictSheet[key2][z] >= dictSheet[key2][j]) {\n          count++;\n        }\n      }\n\n      dictPercentile[key][j] = count / students.length * 100;\n    }\n  }\n\n  ; // working out Mean of sheet time after exam, standard deviation of sheet time after exam, Mean of percentiles, \n\n  for (var i = 0; i < Object.keys(dictPercentile).length; i++) {\n    key = Object.keys(dictPercentile)[i]; //accesses tutorial sheet dictionary\n\n    key2 = Object.keys(dictSheet)[i]; //accesses tutorial sheet dictionary\n\n    for (var j = 0; j <= students.length; j++) {\n      count = 0;\n\n      for (var z = 0; z <= students.length; z++) {\n        if (dictSheet[key2][z] >= dictSheet[key2][j]) {\n          count++;\n        }\n      }\n\n      dictPercentile[key][j] = count / students.length * 100;\n    }\n  }\n\n  ;\n  dictSheetArray = [];\n  dictPercentileArray = []; // console.log(Object.values(dictPercentile.P1))\n  // for all sheets use: Object.keys(dictSheet).length instead of 8\n\n  for (var i = 0; i < 8; i++) {\n    dictSheetArray.push(dictSheet[Object.keys(dictSheet)[i]]);\n    dictPercentileArray.push(dictPercentile[Object.keys(dictPercentile)[i]]);\n  } //Calculating mean of sheets, mean of percentiles, SD of sheets\n\n\n  dictSheetTranspose = dictSheetArray[0].map(function (_, colIndex) {\n    return dictSheetArray.map(function (row) {\n      return row[colIndex];\n    });\n  });\n  dictPercentileTranspose = dictPercentileArray[0].map(function (_, colIndex) {\n    return dictPercentileArray.map(function (row) {\n      return row[colIndex];\n    });\n  });\n\n  for (var i = 0; i < dictSheetTranspose.length; i++) {\n    DaysAfterLectMeanSheet1to8.push(calcAverage(dictSheetTranspose[i]));\n    PercentAvgSheet1to8.push(calcAverage(dictPercentileTranspose[i]));\n    Sheet1to8SD.push(getSD(dictSheetTranspose[i]));\n    Percentile1to8SD.push(getSD(dictPercentileTranspose[i]));\n  } //creating histogram bins with frequency array\n\n\n  var bins = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100];\n  var binCount = [];\n\n  for (var i = 1; i < bins.length; i++) {\n    j = 0;\n    var count = 0;\n\n    while (j < progressScores.length) {\n      if (progressScores[j] < bins[i] && progressScores[j] >= bins[i - 1]) {\n        count++;\n      }\n\n      j++;\n    }\n\n    binCount.push(count);\n  }\n} //function to work out week of the year\n\n\nvar weekOfYear = function weekOfYear(date) {\n  var d = new Date(+date);\n  d.setHours(0, 0, 0);\n  d.setDate(d.getDate() + 4 - (d.getDay() || 7));\n  return Math.ceil(((d - new Date(d.getFullYear(), 0, 1)) / 8.64e7 + 1) / 7);\n}; //function to work out the current day of the year\n\n\nDate.prototype.isLeapYear = function () {\n  var year = this.getFullYear();\n  if ((year & 3) != 0) return false;\n  return year % 100 != 0 || year % 400 == 0;\n}; // Get Day of Year\n\n\nDate.prototype.getDOY = function () {\n  var dayCount = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];\n  var mn = this.getMonth();\n  var dn = this.getDate();\n  var dayOfYear = dayCount[mn] + dn;\n  if (mn > 1 && this.isLeapYear()) dayOfYear++;\n  return dayOfYear;\n};\n\nvar dayOfYear = function dayOfYear(date) {\n  return Math.floor((date - new Date(date.getFullYear(), 0, 0)) / 1000 / 60 / 60 / 24);\n};\n\nfunction sortNumber(a, b) {\n  return a - b;\n}\n\nfunction quantile(array, percentile) {\n  array.sort(sortNumber);\n  var index = percentile / 100. * (array.length - 1);\n\n  if (Math.floor(index) == index) {\n    var result = array[index];\n  } else {\n    var i = Math.floor(index);\n    var fraction = index - i;\n    var result = array[i] + (array[i + 1] - array[i]) * fraction;\n  }\n\n  return result;\n} // calculate sum\n\n\nfunction sumArr(arr) {\n  var a = arr.slice();\n  return a.reduce(function (a, b) {\n    return parseFloat(a) + parseFloat(b);\n  });\n} //calculate average\n\n\nfunction calcAverage(arr) {\n  var a = arr.slice();\n\n  if (a.length) {\n    var sum = sumArr(a);\n    var avg = sum / a.length;\n    return avg;\n  }\n\n  return false;\n} // Standard deviation\n\n\nfunction getSD(data) {\n  var m = calcAverage(data);\n  return Math.sqrt(data.reduce(function (sq, n) {\n    return sq + Math.pow(n - m, 2);\n  }, 0) / (data.length - 1));\n}\n\n;\n\nvar SDHist = /*#__PURE__*/function (_React$Component) {\n  _inherits(SDHist, _React$Component);\n\n  function SDHist(props) {\n    var _this;\n\n    _classCallCheck(this, SDHist);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SDHist).call(this, props));\n    _this.canvasRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(SDHist, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.myChart = new Chart(this.canvasRef.current, _defineProperty({\n        type: 'bar',\n        data: {\n          labels: [\"[0,10]\", \"[10,20]\", \"[20,30]\", \"[30,40]\", \"[40,50]\", \"[50,60]\", \"[60,70]\", \"[70,80]\", \"[80,90]\", \"[90,100]\"],\n          datasets: [{\n            label: 'Average Progress Mark',\n            data: binCount,\n            backgroundColor: ['#0000cc', '#0000cc', '#0000cc', '#0000cc', '#0000cc', '#0000cc', '#0000cc', '#0000cc', '#0000cc', '#0000cc', '#0000cc', '#0000cc', '#0000cc', '#0000cc', '#0000cc', '#0000cc', '#0000cc', '#0000cc'],\n            borderColor: ['#0000cc'],\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: false,\n          scales: {\n            xAxes: [{\n              ticks: {\n                maxRotation: 90,\n                minRotation: 80\n              }\n            }],\n            yAxes: [{\n              ticks: {\n                beginAtZero: true\n              }\n            }]\n          }\n        }\n      }, \"options\", {\n        title: {\n          display: true,\n          text: 'Average time taken in days after lecture to Complete All Tutorial Sheets',\n          fontSize: 25\n        },\n        scales: {\n          xAxes: [{\n            display: true,\n            scaleLabel: {\n              display: true,\n              labelString: 'Progress Test Score Marks(%)'\n            }\n          }],\n          yAxes: [{\n            display: true,\n            scaleLabel: {\n              display: true,\n              labelString: 'Frequency'\n            }\n          }]\n        },\n        legend: {\n          //display: flase, doesn't display legend\n          position: 'right',\n          display: false,\n          labels: {\n            fontColor: '#000'\n          }\n        },\n        layout: {\n          padding: {\n            left: 50,\n            right: 50,\n            bottom: 0,\n            top: 0\n          }\n        } // tooltips:{ to hide tooltips that show when hovering over graph\n        //     enabled: false\n        // },\n\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"canvas\", {\n        ref: this.canvasRef,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 14\n        }\n      });\n    }\n  }]);\n\n  return SDHist;\n}(React.Component);\n\nexport default SDHist;","map":{"version":3,"sources":["C:/Users/Emman/Documents/ME4/FYP/FinalDash/shards-dashboard-react/src/components/2020Graphs/SDHistogram.js"],"names":["React","Chart","d3","binCount","csv","then","makeChart","students","progressScores","dictSheet","Sheet5","Sheet4","Sheet3","Sheet2","Sheet1","Sheet8","Sheet7","Sheet6","Sheet12","Sheet11","Sheet10","Sheet9","Sheet17","Sheet16","Sheet15","Sheet14","Sheet13","LectureDate","dictPercentile","P5","P4","P3","P2","P1","P8","P7","P6","P12","P11","P10","P9","P17","P16","P15","P14","P13","PercentAvgSheet1to8","DaysAfterLectMeanSheet1to8","Sheet1to8SD","Percentile1to8SD","i","length","count","LectureCount","progressKey","Object","keys","progressScoremaybe","push","parseFloat","j","key","value","date","Date","DayNumber","dayOfYear","Math","abs","key2","z","dictSheetArray","dictPercentileArray","dictSheetTranspose","map","_","colIndex","row","dictPercentileTranspose","calcAverage","getSD","bins","weekOfYear","d","setHours","setDate","getDate","getDay","ceil","getFullYear","prototype","isLeapYear","year","getDOY","dayCount","mn","getMonth","dn","floor","sortNumber","a","b","quantile","array","percentile","sort","index","result","fraction","sumArr","arr","slice","reduce","sum","avg","data","m","sqrt","sq","n","pow","SDHist","props","canvasRef","createRef","myChart","current","type","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","responsive","scales","xAxes","ticks","maxRotation","minRotation","yAxes","beginAtZero","title","display","text","fontSize","scaleLabel","labelString","legend","position","fontColor","layout","padding","left","right","bottom","top","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Chart from \"../../utils/chart\";\r\nimport * as d3 from \"d3\";\r\n\r\nvar binCount = [];\r\nd3.csv(\"https://graphtest123.s3.eu-west-2.amazonaws.com/FMX2_Gradebook_2020_21_03_26_Mobius_Plus_PT_anonymous%2B-AWSupload.csv\") // request csv file\r\n.then(makeChart); // converts into an array then call makeChart() function\r\n\r\n// calls function to make a chart after it has been converted into an array\r\nfunction makeChart(students) { // takes in an array of students\r\n\r\n    //make dictionary for tutorial sheets - put in same order as csv\r\n    var progressScores = [];\r\n    var dictSheet = {Sheet5:[] , Sheet4:[] , Sheet3:[] ,Sheet2:[], Sheet1:[], Sheet8:[], Sheet7:[], Sheet6:[], Sheet12:[], Sheet11:[], Sheet10:[], Sheet9:[], Sheet17:[], Sheet16:[], Sheet15:[], Sheet14:[], Sheet13:[]};\r\n    var LectureDate = [28, 21, 14, 7, 0, 49, 42, 35, 77, 70, 63, 56, 112, 105, 98, 91, 84]; //make an array of lecture start dates\r\n    var dictPercentile = {P5:[] , P4:[] , P3:[] ,P2:[], P1:[], P8:[], P7:[], P6:[], P12:[], P11:[], P10:[], P9:[], P17:[], P16:[], P15:[], P14:[], P13:[]};\r\n    var PercentAvgSheet1to8 = [];\r\n    var DaysAfterLectMeanSheet1to8 = [];\r\n    var Sheet1to8SD = [];\r\n    var Percentile1to8SD = [];\r\n    // for loop to check and calculate the days after lecture when students started tutorial sheet\r\n    for (var i =0; i < students.length; i++){\r\n        var count = -1;\r\n        var LectureCount = 0;\r\n        var progressKey = Object.keys(students[i])[97];\r\n        var progressScoremaybe = students[i][progressKey];\r\n        progressScores.push(parseFloat((progressScoremaybe/40)*100));\r\n        for (var j =8; j <= 90; j += 5){\r\n            var key = Object.keys(students[i])[j]; // access title of start times\r\n            var value = students[i][key] // gives date in raw form\r\n                     // console.log(\"Raw form date\" + \" \" + value)\r\n            //convert date string into a time object\r\n            var date = new Date(value);\r\n                    // console.log(\"date\" + \" \" + date)\r\n            var DayNumber = dayOfYear(date);\r\n                    // console.log(\"day number is\" + \" \" + DayNumber)\r\n            //need to account for imperial calendar with 3rd october as week 1\r\n            if (value !== 0){\r\n                count ++;\r\n            } else{\r\n                continue\r\n            }\r\n            if (value === \"\"){\r\n                DayNumber = 154\r\n            }\r\n            else if (dayOfYear(date) >= 286 || dayOfYear(date) < 11){\r\n                DayNumber -= 286;\r\n            } else if (dayOfYear(date) < 46 || dayOfYear(date) >= 11)  {\r\n                DayNumber += 52;\r\n            } else {\r\n                DayNumber += 45\r\n            }\r\n            key = Object.keys(dictSheet)[count]; //accesses tutorial sheet dictionary\r\n            dictSheet[key][i] = Math.abs(DayNumber - LectureDate[LectureCount]);\r\n            LectureCount ++\r\n        }\r\n    };\r\n\r\n    //create percentiles\r\n    for (var i =0; i < Object.keys(dictPercentile).length; i++){\r\n        key = Object.keys(dictPercentile)[i]; //accesses tutorial sheet dictionary\r\n        var key2 = Object.keys(dictSheet)[i]; //accesses tutorial sheet dictionary\r\n        for (var j =0; j <= students.length; j ++){\r\n            count = 0;\r\n            for(var z=0; z <= students.length; z++){\r\n                if (dictSheet[key2][z] >= dictSheet[key2][j]){\r\n                    count ++\r\n                } \r\n            }\r\n            dictPercentile[key][j] = (count/students.length)*100;\r\n        }\r\n    };\r\n\r\n    // working out Mean of sheet time after exam, standard deviation of sheet time after exam, Mean of percentiles, \r\n    for (var i =0; i < Object.keys(dictPercentile).length; i++){\r\n        key = Object.keys(dictPercentile)[i]; //accesses tutorial sheet dictionary\r\n        key2 = Object.keys(dictSheet)[i]; //accesses tutorial sheet dictionary\r\n        for (var j =0; j <= students.length; j ++){\r\n            count = 0;\r\n            for(var z=0; z <= students.length; z++){\r\n                if (dictSheet[key2][z] >= dictSheet[key2][j]){\r\n                    count ++\r\n                } \r\n            }\r\n            dictPercentile[key][j] = (count/students.length)*100;\r\n        }\r\n    };\r\n\r\n    dictSheetArray = [];\r\n    dictPercentileArray = [];\r\n    // console.log(Object.values(dictPercentile.P1))\r\n\r\n    // for all sheets use: Object.keys(dictSheet).length instead of 8\r\n    for(var i=0; i < 8; i++){\r\n        dictSheetArray.push(dictSheet[Object.keys(dictSheet)[i]])\r\n        dictPercentileArray.push(dictPercentile[Object.keys(dictPercentile)[i]])\r\n    }\r\n\r\n    //Calculating mean of sheets, mean of percentiles, SD of sheets\r\n    dictSheetTranspose =  dictSheetArray[0].map((_, colIndex) => dictSheetArray.map(row => row[colIndex]));\r\n    dictPercentileTranspose = dictPercentileArray[0].map((_, colIndex) => dictPercentileArray.map(row => row[colIndex]));\r\n    for(var i=0; i<dictSheetTranspose.length; i++){\r\n        DaysAfterLectMeanSheet1to8.push(calcAverage(dictSheetTranspose[i]))\r\n        PercentAvgSheet1to8.push(calcAverage(dictPercentileTranspose[i]))\r\n        Sheet1to8SD.push(getSD(dictSheetTranspose[i]))\r\n        Percentile1to8SD.push(getSD(dictPercentileTranspose[i]))\r\n    }\r\n\r\n    //creating histogram bins with frequency array\r\n    var bins = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\r\n    var binCount = [];\r\n    for (var i=1; i<bins.length; i++){\r\n        j=0;\r\n        var count = 0;\r\n        while(j < progressScores.length){\r\n            if(progressScores[j] < bins[i] && progressScores[j] >= bins[i-1]){\r\n                count ++\r\n            }\r\n            j++;\r\n        }\r\n        binCount.push(count)\r\n    }\r\n            }\r\n\r\n        //function to work out week of the year\r\n        var weekOfYear = function(date){\r\n           var d = new Date(+date);\r\n           d.setHours(0,0,0);\r\n           d.setDate(d.getDate()+4-(d.getDay()||7));\r\n           return Math.ceil((((d-new Date(d.getFullYear(),0,1))/8.64e7)+1)/7);\r\n        };\r\n\r\n        //function to work out the current day of the year\r\n        Date.prototype.isLeapYear = function() {\r\n            var year = this.getFullYear();\r\n            if((year & 3) != 0) return false;\r\n            return ((year % 100) != 0 || (year % 400) == 0);\r\n        };\r\n\r\n        // Get Day of Year\r\n        Date.prototype.getDOY = function() {\r\n            var dayCount = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];\r\n            var mn = this.getMonth();\r\n            var dn = this.getDate();\r\n            var dayOfYear = dayCount[mn] + dn;\r\n            if(mn > 1 && this.isLeapYear()) dayOfYear++;\r\n            return dayOfYear;\r\n        };\r\n\r\n        const dayOfYear = date =>\r\n        Math.floor((date - new Date(date.getFullYear(), 0, 0)) / 1000 / 60 / 60 / 24);\r\n\r\n\r\n        function sortNumber(a,b) {\r\n            return a - b;\r\n        }\r\n\r\n        function quantile(array, percentile) {\r\n            array.sort(sortNumber);\r\n            var index = percentile/100. * (array.length-1);\r\n            if (Math.floor(index) == index) {\r\n                var result = array[index];\r\n            } else {\r\n                var i = Math.floor(index)\r\n                var fraction = index - i;\r\n                var result = array[i] + (array[i+1] - array[i]) * fraction;\r\n            }\r\n            return result;\r\n        }\r\n\r\n            // calculate sum\r\n        function sumArr(arr){\r\n            var a = arr.slice();\r\n            return a.reduce(function(a, b) { return parseFloat(a) + parseFloat(b); });\r\n        }\r\n\r\n        //calculate average\r\n        function calcAverage(arr){\r\n            var a = arr.slice();\r\n            if (a.length){\r\n                var sum = sumArr(a);\r\n                var avg = sum / a.length;\r\n                return avg;\r\n            }    \r\n            return false;\r\n        }\r\n\r\n        // Standard deviation\r\n        function getSD(data) {\r\n            let m = calcAverage(data);\r\n            return Math.sqrt(data.reduce(function (sq, n) {\r\n                    return sq + Math.pow(n - m, 2);\r\n                }, 0) / (data.length - 1));\r\n        };\r\n\r\nclass SDHist extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.canvasRef = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n      this.myChart = new Chart(this.canvasRef.current, {\r\n        type: 'bar',\r\n        data: {\r\n            labels: [\"[0,10]\", \"[10,20]\", \"[20,30]\", \"[30,40]\", \"[40,50]\", \"[50,60]\", \"[60,70]\", \"[70,80]\", \"[80,90]\", \"[90,100]\"],\r\n            datasets: [{\r\n            label: 'Average Progress Mark',\r\n            data: binCount,\r\n            backgroundColor: [\r\n                '#0000cc', '#0000cc', '#0000cc', '#0000cc', '#0000cc', '#0000cc', '#0000cc', '#0000cc', '#0000cc', '#0000cc', '#0000cc', '#0000cc', '#0000cc', '#0000cc', '#0000cc', '#0000cc', '#0000cc', '#0000cc'\r\n\r\n            ],\r\n            borderColor: [\r\n                '#0000cc',\r\n            ],\r\n            borderWidth: 1\r\n            }]\r\n        },\r\n        options: {\r\n            responsive: false,\r\n            scales: {\r\n            xAxes: [{\r\n                ticks: {\r\n                maxRotation: 90,\r\n                minRotation: 80\r\n                }\r\n            }],\r\n            yAxes: [{\r\n                ticks: {\r\n                beginAtZero: true\r\n                }\r\n            }]\r\n            }\r\n        },\r\n        options: {\r\n            title: {\r\n                display: true,\r\n                text: 'Average time taken in days after lecture to Complete All Tutorial Sheets',\r\n                fontSize: 25\r\n            },\r\n            scales: {\r\n                xAxes: [{\r\n                    display: true,\r\n                    scaleLabel: {\r\n                        display: true,\r\n                        labelString: 'Progress Test Score Marks(%)'\r\n                    }\r\n                }],\r\n                yAxes: [{\r\n                    display: true,\r\n                    scaleLabel: {\r\n                        display: true,\r\n                        labelString: 'Frequency'\r\n                    }\r\n                }]\r\n            },\r\n            legend: {\r\n                //display: flase, doesn't display legend\r\n                position: 'right',\r\n                display: false,\r\n                labels: {\r\n                    fontColor: '#000'\r\n                }\r\n            },\r\n            layout: {\r\n                padding: {\r\n                    left: 50,\r\n                    right: 50,\r\n                    bottom: 0,\r\n                    top:0\r\n                }\r\n            },\r\n            // tooltips:{ to hide tooltips that show when hovering over graph\r\n            //     enabled: false\r\n            // },\r\n        }\r\n        \r\n    });\r\n    }\r\n  \r\n    render() {\r\n      return <canvas ref={this.canvasRef} />;\r\n    }\r\n  }\r\n\r\n\r\nexport default SDHist;\r\n"]},"metadata":{},"sourceType":"module"}